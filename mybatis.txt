框架由 orm,mvc,rpc(分布式应用架构),soa(流动计算架构),
一、mybatis简介
	MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。
	MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。
	MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，
	将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。
	
	与hibernate的区别
		hibernate是完整的orm框架，由hibernate底层生成sql语句，我们只需编写sql语句
		mybatis是不完全的orm框架，需要手动编写sql，需要关注sql本身

二、mybatis框架原理	
	1、Hibernate 执行过程
		创建加载映射文件， 创建Configuration对象
		创建sessionFactory对象
		创建session对象
		crud，需要开启事务
		释放资源
	2、	mybatis执行过程
三、入门案例
	1、数据库
		User（id，name，birthday）
	2、jar包
		核心jar包，mybatis-3.4.5.jar
		依赖包，lib下
		mysql驱动
		junit
	3、log4j.properties
		查看执行的日志，
			执行的sql语句
			输入参数
			输出结果
			
	4、jdbc.properties
		数据库基本四项
	5、SqlMapConfig.xml
		mybatis 全局配置文件（核心配置文件）
		properties :加载jdbc.properties文件，
		Environments:配置环境，
		Mapper:加载映射文件
		
	6、User.xml
		映射文件，配置执行的statement（sql语句，输入参数，输出结果）
		
	7、持久化类
		User(id,username,password,age)
	8、测试
		加载映射文件，
		创建SqlSessionFactory对象
		创建SqlSession对象
		执行crud操作（调用在User.xml文件中配置的sql语句）
	9、结论
		配置标签是 <select>  <insert>  <update>  <delete>
		parameterType输入参数类型，可以使用全类名或别名
		resultType:输出结果类型
		
		selectOne:查询0条或1条记录，如果返回值大于1条，将报错
		selectList:查询0条或多条记录
		
		#{}:相当于占位符，“？”，指定输入参数的名称
			参数如果是简单类型，名称任意，
			参数如果是引用类型，是类的属性名称，可以防止sql注入；
			
		${}:相当于拼接sql语句，对传入的值不做任何解释，直接拼接，类似拼接字符串
			如果是简单类型，使用${value}
		
四、使用原始的Dao方式（了解）
	0、分析对象的作用域
		SqlSessionFactoryBuilder:
			构建器，使用构建器，加载配置文件创建SqlSessionFactoryBuilder,
			创建成功之后构建器可以销毁，生命周期在方法内
		SqlSessionFactory:
			会话工厂，创建会话，可以创建多个sqlSession对象，只需要一个工厂即可，声明周期在应运程序范围内
			
			
		SqlSession
			会话，默认实现类DefaultSession
			可以进行crud操作，调用映射文件中配置的statement,执行完成之后，可以关闭session，生命周期范围在方法内
			
			SqlSessionFactory只需创建一次
			SqlSession可以任意创建多次
	1、创建接口
	2、创建接口的实现类
	3、测试类



五、使用Mapper代理方式（掌握）
	只需要编写接口，相当于Dao的接口，
	需要遵守一些开发规范，如下：
	开发规范：
		1、mapper接口的全限定名要和mapper映射文件的namespace的值相同。
		2、mapper接口的方法名称要和mapper映射文件中的statement的id一致。
		3、mapper接口的方法参数只能有一个，且类型要和mapper映射文件中的statement的
			parameterType的值保持一致。
		4、mapper接口的返回值类型要和mapper映射文件中的statement的resultType值或
			resultMap中的type值保持一致。
		
		通过规范式的开发接口，可以解决原始Dao开发当中存在的问题：
		1、模板代码已经去掉
		2、剩下去不掉的操作数据库的代码，其实就是一行代码，这行代码中硬编码的部分，
			通过第一和第二个规范就可以解决。

	***********************************************思路******************************************
	1、创建接口，
	2、创建映射文件，与接口在一个文件夹下，由规范1可得
		比如:UserMapper.xml
		(1)	<mapper namespace="接口文件全类名"。>
				<select id="sql语句的id" parameterType="参数类型" resultType="返回类型">
					sql语句
				</select>
			</mapper>
	3、测试执行sql语句
		(1)首先，加载数据库配置文件，创建SqlSessionFactory对象
		(2)通过SqlSessionFactory对象，创建Sqlsession对象
		(3)通过SqlSession对象，得到接口的代理对象
			UserMapper userMapper = session.getMapper(UserMapper.class);
		(4)通过代理对象，调用接口中的方法，（底层自动通过配置文件，来匹配实现功能）
			User user = userMapper.findById(1);//此处调用的方法名
		(5)在核心配置文件中，把代理映射文件，加载进去。
			<mappers>
				加载指定包下的映射文件
				<package name=""/>
			
			</mapper>
			
			
			
			
六、全局配置文件
	SqlMapConfig.xml
	1、properties
	加载properties配置文件，或文件内容以key-value存在的文件
	比如加载数据库的基本四项
	<!-- 加载properties文件 -->
	<properties resource="jdbc.properties">
		<property name="jdbc.password" value="12345"/>
	</properties>
	
	配置的信息有加载顺序，先加载properti标签设置的值，再加载配置文件
	后加载的内容覆盖先加载的

	2、settings
	全局配置参数
		比如延迟加载，二级缓存，事务处理

	3、typeAliases定义别名
	_byte 	byte 
	_long 	long 
	_short 	short 
	_int 	int 
	_integer 	int 
	_double 	double 
	_float 	float 
	_boolean 	boolean 
	string 	String 
	byte 	Byte 
	long 	Long 
	short 	Short 
	int 	Integer 
	integer 	Integer 
	double 	Double 
	float 	Float 
	boolean 	Boolean 
	date 	Date 
	decimal 	BigDecimal 
	bigdecimal 	BigDecimal 
	4、自定义别名
		可以给持久化类定义别名
		<!-- 自定义别名 
			type:x需要定义别名的全类名
			alias:别名
			
			typeAlias:使用单标签
			-->
		<typeAliases>
			<!-- <typeAlias type="com.qf.domain.User" alias="user"/>
			 -->
			<!-- 
				给指定包下的类定义别名，批量定义
				别名是类名，首字母大小写都可以
			 -->
			<package name="com.qf.domain"/>
		</typeAliases>

	6.4、environments
	配置执行环境
	事务
	连接池

	整合时由spring管理，不用配置

	6.5、mappers
	加载映射文件

	

二、输入参数
	使用parameterType指定输入参数的类型
	简单类型
		findById,类的属性Integer,参数int
		findByUsername,String
		
	pojo:
		addUser
		updateUser
	hashMap
		
	2.1扩展类
		1、User类中的属性不能完全封装参数，可以使用扩展类
		UserExt extends User{
			//新增其他属性
		}
		
		2、需求变了，封装的数据又多了，比如进行关联查询，将关联查询的数据都需要封装
			需要进一步扩展
			
			UserVo{
				UserExt
				//其他属性Order
			}
			public List<User> findByUserVo(UserVo userVo);

			<select id="findByUserVo" parameterType="userVo" resultType="User">
				<!-- select * from user where id=#{userExt.id} -->
				select * from user where age=#{userExt.age}
					and username like '%${userExt.username}%'
			</select>

		3、使用hashMap输入参数
			public List<User> findByHashMap(HashMap<String, Object> map);
		
			<!-- 输入参数是hashmap时，#{age}是map的key -->
			<select id="findByHashMap" parameterType="hashmap" resultType="User">
				select * from user where username like '%${username}%'
			</select>

			SqlSession session = sqlSessionFactory.openSession();
			UserMapper userMapper = session.getMapper(UserMapper.class);
			HashMap<String, Object> map = new HashMap<>();
			map.put("username", "shi");
			List<User> users = userMapper.findByHashMap(map);
			for (User user : users) {
				System.out.println(user);
			}
			session.close();

三、输出结果
	使用resultType 或 resultMap设置输出结果类型
	resultType:
		int, pojo:获得一个对象，或集合
	
	1、封装原则
	使用resultType进行结果映射时，查询的列名和映射的pojo属性名完全一致，该列才能映射成功
	如果出现的列名和映射的pojo属性名全部不一致，则不会创建pojo对象；
	如果出现的列名和映射的pojo属性名有一个一致，就会创建pojo对象。

	<!-- 
		查询的字段与类中的属性完全不一致，可以使用resultMap将字段与属性进行映射
		id:唯一标识，被引用时使用
		type:指定映射的类名，可以使用别名
		
		子标签:
			id:映射主键
				property:类中的属性
				column:查询的字段
			result:映射其他字段
	 -->


四、动态sql
	可以对sql语句进行动态的拼接，可以灵活的的编写sql语句	
	比如:select 子句where子句

	1、if、where、foreach
	if:对传入的值进行判断，判断是否非空，或者为空串
	where:where子句。可以去掉第一个 and
	
	
	案例：
	<!-- 动态sql 对参数属性做判断(非空，空串) -->
	<select id="findUsersByUserVo" parameterType="userVo"
		resultType="User">
		select * from user
		<where>
			<if test="userExt != null">
				<if test="userExt.age!=null and userExt.age!=''">
					and age=#{userExt.age}
				</if>
				<if test="userExt.username!=null and userExt.username!=''">
					and username like '%${userExt.username}%'
				</if>
			</if>
		</where>
		<!-- where age = #{userExt.age} and username like '%${userExt.username}%' -->
	</select>

	<select id="getCountByUserVo" parameterType="userVo" resultType="int">
		select count(*) from user
		<where>
			<!-- 引用sql片段 -->
			<include refid="whereClase"></include>
		</where>
	</select>

	<!-- sql片段，将重复的sql语句的部分内容抽取出来形成sql片段，之后应用该片段 -->
	<sql id="whereClase">
		<if test="userExt != null">
			<if test="userExt.age!=null and userExt.age!=''">
				and age=#{userExt.age}
			</if>
			<if test="userExt.username!=null and userExt.username!=''">
				and username like '%${userExt.username}%'
			</if>
		</if>
	</sql>

	foreach语句:
	<!-- select * from user where id in (1,2,3,4,5)
	<foreach>:对集合进行遍历
	collecion="ids":类中的集合名称
	item="id":集合中的一个元素
	open="(":开始部分，左括号
	close=")":结束部分，右括号
	separator=",":分隔符
	#{id}:集合中的每一个元素
	 -->
	<select id="findByIds" parameterType="userVo" resultType="user">
		select * from user
			<where>
				<if test="ids !=null and ids.size()>0">
					id in
					<foreach collection="ids" item="id" open="(" close=")" separator=",">
						#{id}
					</foreach>
					
				</if>
			</where>
	</select>
	
	
	<select id="findByList" parameterType="java.util.List" resultType="user">
		select * from user
		<where>
			<if test="list !=null and list.size>0">
				<!-- id in --> 
				<foreach collection="list" item="id" open=" id in (" close=")" separator=",">
					#{id}
				</foreach>
			</if>
		</where>
	</select>

	
	关联查询
	
	一对一
		resultType
		resultMap
	一对多
		resultMap
	
	多对多
		resultMap

	分析表结构
	User--Orders
	一对多，一个用户有多个订单
	Orders--User	
		一对一，一个订单属于一个用户
		
	Orders -- orderdetail
		一对多
	orderdetail --Orders
		一对一
		
	items -- orderdetail
		一对多
	orderdetail-- items
		一对一

	多对多
	orders--items
	user--items


select distribution_mode_id, SUM(order_money) AS total_money, COUNT(case when parent_order_id is null then 1 end)
AS total_number FORM order_test GROUP BY distribution_mode_id;









